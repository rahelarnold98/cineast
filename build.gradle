plugins {
    id 'java'
    id 'idea'
    id 'com.google.protobuf' version '0.8.14'
    id 'de.undercouch.download' version "4.1.1"
    id 'com.google.osdetector' version '1.6.2'
}

allprojects {
    /* Group name of our artifacts */
    group = 'org.vitrivr'
    /* Our current version */
    version = '3.0.3'

    /* Required to have subprojects dependencies*/
    apply plugin: 'java'
    /* Required to have protobuf in all subprojects */
    apply plugin: 'com.google.protobuf'
    /* Above is legacy apply method in gradle. There should be a better way to do this using convention plugins / buildSrc*/
}

project.ext.protobufVersion = "3.14.0"
project.ext.grpcVersion = "1.34.0"


subprojects {
    buildscript {
        repositories {
            jcenter()
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2"
            }
        }

        dependencies {
            classpath "gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.6.2"
            classpath "gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.14"
            classpath "de.undercouch:gradle-download-task:4.1.1"
        }
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        jcenter()
        mavenCentral()
    }

    /* Important warnings that are currently missing simply because there are too many: "cast", "rawtypes". Ideally, "all" should be used in the future. */
    def enabledWarnings = ["-Xlint:deprecation", "-Xlint:empty", "-Xlint:overrides", "-Xlint:serial", "-Xlint:static", "-Xlint:unchecked", "-Xlint:varargs"]
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs += enabledWarnings
    }
    compileTestJava.options.compilerArgs += enabledWarnings

    dependencies {
        /** Log4j 2 */
        implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.+'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.+'
        implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.+'

        /** Jackson (JSON conversion) */
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.+'
        implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.+'

        /** Test dependencies (JUnit 5) */
        testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.0'
        testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.3.2'
        testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.0'

        /** Protobuf & gRPC. */
        implementation group: "com.google.protobuf", name: "protobuf-java", version: "$protobufVersion"
        implementation group: "io.grpc", name: "grpc-netty", version: "${grpcVersion}"
        implementation group: "io.grpc", name: "grpc-protobuf", version: "${grpcVersion}"
        implementation group: "io.grpc", name: "grpc-stub", version: "${grpcVersion}"
    }
}

project(':cineast-runtime') {
    dependencies {
        implementation project(':cineast-core')
    }
}

project(':cineast-api') {
    dependencies {
        implementation project(':cineast-runtime')
        implementation project(':cineast-core')
    }
}

idea {
    module {
        downloadJavadoc = true

        excludeDirs += file('data')
        excludeDirs += file('thumbnails')
    }
}

task getExternalFiles {
    doLast {
        def fileList = new File("externalFiles.csv")
        fileList.eachLine { String line ->
            def split = line.split(",")
            download {
                src split[0]
                dest split[1]
            }
        }
    }
}

task generateOpenApiSpecs(type: JavaExec){
    classpath = project(":cineast-api").sourceSets.main.runtimeClasspath
    main = 'org.vitrivr.cineast.api.docs.GenerateOpenApiSpecs'

    def config = project.hasProperty("cineastConfig") ? project.getProperty("cineastConfig") : "cineast.json"

    args("${config}")
}
