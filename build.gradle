allprojects {
    version = '2.5'
}

subprojects {
    buildscript {
        repositories {
            jcenter()
            mavenCentral()
            maven {
                url "https://plugins.gradle.org/m2"
            }
        }

        dependencies {
            classpath "gradle.plugin.com.google.gradle:osdetector-gradle-plugin:1.6.2"
            classpath 'gradle.plugin.com.google.protobuf:protobuf-gradle-plugin:0.8.10'
            classpath 'de.undercouch:gradle-download-task:3.1.2'
            classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M4'
        }
    }

    apply plugin: "java"

    repositories {
        jcenter()
        mavenCentral()
    }

    /* Important warnings that are currently missing simply because there are too many: "cast", "rawtypes". Ideally, "all" should be used in the future. */
    def enabledWarnings = ["-Xlint:deprecation", "-Xlint:empty", "-Xlint:overrides", "-Xlint:serial", "-Xlint:static", "-Xlint:unchecked", "-Xlint:varargs"]
    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs += enabledWarnings
    }
    compileTestJava.options.compilerArgs += enabledWarnings

    dependencies {
        /** Log4j 2 */
        compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.12.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.12.0'
        compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.12.0'

        /** Jackson (JSON conversion) */
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.9'
        compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9'

        /** Test dependencies (JUnit 5) */
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.0'
        testCompile group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.3.2'
        testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.5.0'
    }
}

project(':cineast-runtime') {
    dependencies {
        compile project(':cineast-core')
    }
}

project(':cineast-api') {
    dependencies {
        compile project(':cineast-runtime')
        compile project(':cineast-core')
    }
}

apply plugin: "idea"

idea {
    module {
        downloadJavadoc = true

        excludeDirs += file('data')
        excludeDirs += file('thumbnails')
    }
}

