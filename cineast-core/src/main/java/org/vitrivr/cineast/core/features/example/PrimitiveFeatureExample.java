package org.vitrivr.cineast.core.features.example;

import java.util.List;
import java.util.function.Supplier;

import org.apache.commons.lang3.RandomUtils;
import org.vitrivr.cineast.core.config.ReadableQueryConfig;
import org.vitrivr.cineast.core.data.providers.primitive.PrimitiveTypeProvider;
import org.vitrivr.cineast.core.data.score.ScoreElement;
import org.vitrivr.cineast.core.data.segments.SegmentContainer;
import org.vitrivr.cineast.core.db.setup.AttributeDefinition;
import org.vitrivr.cineast.core.db.setup.AttributeDefinition.AttributeType;
import org.vitrivr.cineast.core.db.setup.EntityCreator;
import org.vitrivr.cineast.core.features.abstracts.AbstractFeatureModule;

/**
 * This class serves as an example of how to implement an {@link AbstractFeatureModule}, but having a {@link PrimitiveTypeProvider} as a feature output.
 * Since this is in the example package, you have to provide the FQN, i.e. org.vitrivr.cineast.core.features.example.PrimitiveFeatureExample in the config to use it.
 */
public class PrimitiveFeatureExample extends AbstractFeatureModule {

    /**
     * Our table name
     */
    public static final String PRIMITIVE_FEATURE_EXAMPLE_TABLE_NAME = "features_primitiveexample";

    /**
     * {@link AbstractFeatureModule#vectorLength} is only used in {@link AbstractFeatureModule#initalizePersistentLayer(Supplier)}, so since we overwrite that method, it does not matter what we specify.
     * {@link AbstractFeatureModule#maxDist} is used for the correspondence function which processes all scores generated by the {@link #getSimilar(SegmentContainer, ReadableQueryConfig)} method.
     */
    public PrimitiveFeatureExample() {
        super(PRIMITIVE_FEATURE_EXAMPLE_TABLE_NAME, 5, 1);
    }

    /**
     * Here, you can do whatever you want for a given shot. You can store multiple objects per shot.
     */
    @Override
    public void processSegment(SegmentContainer shot) {
        this.persist(shot.getId(), PrimitiveTypeProvider.fromObject(RandomUtils.nextFloat(0, 5)));
    }

    /**
     * This heavily depends on your feature. In general, you will want to perform some sort of retrieval using the {@link #selector} associated with this feature and then return {@link ScoreElement} which map the id of a multimediasegment or object to a score between 0 and {@link #maxDist}
     */
    @Override
    public List<ScoreElement> getSimilar(SegmentContainer sc, ReadableQueryConfig qc) {
        // not supported by default. Implement your own using this.selector
        throw new UnsupportedOperationException();
    }

    /**
     * Here, we initialize the underlying database layer. This heavily depends on your feature.
     */
    @Override
    public void initalizePersistentLayer(Supplier<EntityCreator> supply) {
        supply.get().createFeatureEntity(PRIMITIVE_FEATURE_EXAMPLE_TABLE_NAME, true, new AttributeDefinition("feature", AttributeType.FLOAT));
    }
}
