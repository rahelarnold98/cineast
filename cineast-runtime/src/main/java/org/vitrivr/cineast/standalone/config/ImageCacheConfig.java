package org.vitrivr.cineast.standalone.config;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.File;

public final class ImageCacheConfig {
	public static enum Policy{
		FORCE_DISK_CACHE, //cache to disk even if newInMemoryMultiImage is requested
		DISK_CACHE, //cache to disk unless newInMemoryMultiImage is requested
		AUTOMATIC, //keep in memory as long as threshold is not exceeded, makes exceptions for images not generated by the video decoder
		AVOID_CACHE //avoids cache until hard limit is reached
	}

	private static final Logger LOGGER = LogManager.getLogger();

	private Policy cachingPolicy =  Policy.AUTOMATIC;
	private long softMinMemory = 3096;
	private long hardMinMemory = 2048;
	private File cacheLocation =new File(".");

	@JsonCreator
	public ImageCacheConfig() {

	}

	/**
	 *
	 * @param softMemoryLimit Soft memory limit for in-memory frame cache in MB
	 * @param hardMemoryLimit Hard memory limit for in-memory frame cache in MB
	 * @param cachePolicy Caching Policy
	 * @param cacheLocation the file system location of the disk cache
	 * @throws IllegalArgumentException in case any of the memory limits is negative
	 * @throws NullPointerException in case the cachePolicy or cacheLocation is null
	 * @throws SecurityException in case access to cacheLocation is not permitted
	 */
	public ImageCacheConfig(int softMemoryLimit, int hardMemoryLimit, Policy cachePolicy, File cacheLocation){
		if(softMemoryLimit < 0){
			throw new IllegalArgumentException("Memorylimit must me positive");
		}
		if(hardMemoryLimit < 0){
			throw new IllegalArgumentException("Memorylimit must me positive");
		}
		if(cachePolicy == null){
			throw new NullPointerException("CachePolicy cannot be null");
		}
		if(cacheLocation == null){
			throw new NullPointerException("CacheLocation cannot be null");
		}
		if(!(cacheLocation.exists() && cacheLocation.isDirectory()) || cacheLocation.mkdirs()){
			this.cacheLocation = new File(".");
			LOGGER.warn("Specified cache location ({}) is invalid, using default location: {}", cacheLocation.getAbsolutePath(), this.cacheLocation.getAbsolutePath());
		}else{
			this.cacheLocation = cacheLocation;
		}
		this.softMinMemory = 1024L * 1024L * softMemoryLimit;
		this.hardMinMemory = 1024L * 1024L * hardMemoryLimit;
		this.cachingPolicy = cachePolicy;
	}
	
	/**
	 * @return the soft memory limit in bytes
	 */
	@JsonProperty
	public final long getSoftMinMemory(){
		return this.softMinMemory;
	}

	@JsonSetter
	public void setSoftMemoryLimit(long softMinMemory) {
		if(softMinMemory < 0){
			throw new IllegalArgumentException("Memorylimit must me positive");
		}
		this.softMinMemory = 1024L * 1024L * softMinMemory;
	}
	
	/**
	 * @return the hard memory limit in bytes
	 */
	@JsonProperty
	public final long getHardMinMemory(){
		return this.hardMinMemory;
	}

	@JsonSetter
	public void setHardMemoryLimit(long hardMinMemory) {
		if(hardMinMemory < 0){
			throw new IllegalArgumentException("Memorylimit must me positive");
		}
		this.hardMinMemory = 1024L * 1024L * hardMinMemory;
	}

	/**
	 * @return the caching policy
	 */
	@JsonProperty
	public final Policy getCachingPolicy(){
		return this.cachingPolicy;
	}
	public void setCachingPolicy(Policy cachingPolicy) {
		if(cachingPolicy == null){
			throw new NullPointerException("CachePolicy cannot be null");
		}
		this.cachingPolicy = cachingPolicy;
	}

	/**
	 * @return the file system location of the cache
	 */
	@JsonProperty
	public final File getCacheLocation(){
		return this.cacheLocation;
	}
	public void setCacheLocation(File cacheLocation) {
		if(cacheLocation == null){
			throw new NullPointerException("CacheLocation cannot be null");
		}
		this.cacheLocation = cacheLocation;
	}
	
	@Override
	public String toString(){
		StringBuilder builder = new StringBuilder();
		builder.append("\"cache\" : { \"cachePolicy\" : \"");
		builder.append(this.cachingPolicy.toString());
		builder.append("\", \"softMemoryLimit\" : ");
		builder.append(this.softMinMemory / 1024L / 1024L);
		builder.append("\", \"hardMemoryLimit\" : ");
		builder.append(this.hardMinMemory / 1024L / 1024L);
		builder.append(", \"cacheLocation\" : \"");
		builder.append(this.cacheLocation.getAbsolutePath());
		builder.append("\" }");
		return builder.toString();
	}
	
}
